# 直進距離500mmで出力を変えて精度を試すプログラム（Gemini-2.5-pro）
# このプログラムは、ロボットが500mm直進する際の精度を、様々なモーター出力で検証します
# 各出力設定で複数回実験を行い、平均誤差を算出して最適な出力設定を特定します
# 
# 【実験の目的】
# - 直進精度に最も適したモーター出力を特定する
# - 出力設定による直進精度への影響を定量的に評価する
# - 系統的な誤差（過走行・不足走行）の傾向を把握する

from setup import initialize_robot  # ロボット初期化関数をインポート
from pybricks.tools import wait     # 待機時間制御用

# ===== 実験パラメータの設定 =====
# モーター出力リスト（10%〜100%）
# 低出力から高出力まで段階的にテストして、精度への影響を調査
# 10%刻みで設定することで、出力による精度変化を詳細に観察可能
power_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# 試す直進距離は500mmのみ
# 500mmは一般的な直進距離で、精度が重要
# この距離は、ロボットの移動能力と実験時間のバランスを考慮して選択
distance_mm = 500

# 各条件での実験回数
# 統計的な信頼性を確保するため、複数回実験
# 3回の実験により、偶然誤差を平均化して系統誤差を抽出
repeat_num = 3

# ===== ロボットの初期化 =====
# 最初に一度だけ初期化
# ハブ、モーター、DriveBase、センサーを設定
# 初期化は実験開始前に一度だけ行い、実験中は変更しない
hub, left, right, robot = initialize_robot(
    straight_speed_percent=40,  # 直進速度（40%に設定）
    turn_speed_percent=30,     # 旋回速度（30%に設定）
    motor_power_percent=100    # 仮の値（後でdcで上書き）
)

# ===== 実験結果を格納するリスト =====
all_results = []  # 全ての結果を記録するリスト
# 各出力設定の結果を格納するためのリスト
# 形式: (出力%, 平均誤差, 平均絶対誤差, 実験回数)

# ===== 各出力設定での実験ループ =====
for power in power_list:
    print(f"\n==============================")
    print(f"モーター出力: {power}% で実験開始")
    print(f"==============================")
    
    # 出力を設定
    # robot.settings()で速度を設定（left.dc()とright.dc()の代わり）
    # power/100で0.0〜1.0の範囲に正規化し、速度として設定
    # 最大速度500mm/sに対する割合として設定
    straight_speed = 500 * (power / 100)  # mm/s単位
    robot.settings(straight_speed=straight_speed)
    
    # この出力設定での誤差を記録するリスト
    errors = []      # 符号付き誤差（正負の値）
    abs_errors = []  # 絶対誤差（常に正の値）
    # 符号付き誤差：過走行（+）、不足走行（-）を区別
    # 絶対誤差：精度の絶対的な指標として使用
    
    # ===== 各実験回数のループ =====
    for trial in range(1, repeat_num + 1):
        print(f"\n--- [出力{power}% 距離{distance_mm}mm] 実験{trial}/{repeat_num} ---")
        
        # ロボットを指定距離だけ直進させる
        # robot.straight()は指定距離まで直進し、自動的に停止する
        # 正の値で前進、負の値で後退
        robot.straight(distance_mm)
        
        # 直進完了を待つ（1秒）
        # モーターの停止とセンサー値の安定化を待つ
        wait(1000)
        
        # 現在の走行距離を取得
        # robot.distance()は初期化後の累積走行距離を返す
        # 単位はmm
        current_distance = robot.distance()
        
        # 誤差を計算
        # 正の値：目標より多く進んだ、負の値：目標より少なく進んだ
        # 誤差 = 実際の距離 - 目標距離
        error = current_distance - distance_mm
        errors.append(error)
        abs_errors.append(abs(error))
        
        # 結果を表示
        # 符号を決定して、過走行か不足走行かを明確に表示
        sign = "+" if error >= 0 else "-"
        print(f"→ 実際の距離: {current_distance:.1f}mm")
        print(f"→ 誤差: {sign}{abs(error):.1f}mm")
        print("-------------------------------")
        
        # 進んだ距離分だけ戻る
        # 元の位置に戻ることで、次の実験の開始位置を統一
        print(f"→ 元の位置に戻ります...")
        robot.straight(-current_distance)
        wait(1000)  # 戻り完了を待つ
        
        # ロボットを停止
        # 確実に停止させるため、明示的にstop()を呼び出し
        robot.stop()
        wait(200)  # 停止を確実にするため少し待機
        
        # センサーをリセット（次の実験のため）
        # robot.reset()で走行距離を0にリセット
        # これにより、次の実験で正確な距離測定が可能
        robot.reset()
        wait(500)  # リセット完了を待つ
    
    # ===== この出力設定での統計計算 =====
    # 平均誤差計算（符号付き）
    # 系統的な過走行・不足走行の傾向を把握
    mean_error = sum(errors) / repeat_num
    # 平均絶対誤差計算（精度の指標）
    # 出力設定による精度の絶対的な評価指標
    mean_abs_error = sum(abs_errors) / repeat_num
    
    # 結果をリストに追加
    # 後で表形式で表示するため、タプル形式で保存
    all_results.append((power, mean_error, mean_abs_error, repeat_num))

# ===== 結果の表示 =====
# 罫線付き表形式で結果を出力
# 見やすい表形式で、各出力設定の精度を比較可能
print(f"\n=== {distance_mm}mm直進精度テスト結果（Gemini-2.5-pro） ===")
print("+------------+----------------+-------------------+------------+")
print("| 出力[%]    | 平均誤差[mm]   | 平均絶対誤差[mm]   | 実験回数   |")
print("+------------+----------------+-------------------+------------+")

# 各出力設定の結果を表形式で表示
for power, mean_error, mean_abs_error, repeat_num in all_results:
    # 符号を決定（正の誤差は+、負の誤差は-）
    # 過走行と不足走行を視覚的に区別
    sign = "+" if mean_error >= 0 else "-"
    # 表形式で出力（右寄せで整列）
    # 数値の桁数を揃えて見やすく表示
    print(f"| {power:>10} |   {sign}{abs(mean_error):>8.2f}   |      {mean_abs_error:>8.2f}      | {repeat_num:>6}    |")

print("+------------+----------------+-------------------+------------+")

# ===== 結果の解釈 =====
# 平均絶対誤差が最も小さい出力設定が、最も精度が高い
# 平均誤差の符号で、系統的な過走行（+）か不足走行（-）かを判断可能
# 
# 【結果の活用方法】
# 1. 平均絶対誤差が最小の出力設定を最適値として採用
# 2. 平均誤差の符号から、ロボットの系統的な特性を把握
# 3. 出力による精度変化の傾向を分析し、制御パラメータの調整に活用 